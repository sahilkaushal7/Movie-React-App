{"version":3,"sources":["Containers/Movies/Movies.js","Containers/Movie/Movie.js","App.js","serviceWorker.js","Store/reducer.js","index.js"],"names":["Movies","count","onScroll","window","scrollY","innerHeight","axios","get","_this","then","response","props","addMovies","data","onMovieClick","id","history","push","_this2","this","setMovies","catch","error","console","log","addEventListener","removeEventListener","_this3","movies","loading","react_default","a","createElement","style","color","movieArray","map","movie","index","key","_id","className","onClick","backgroundImage","poster_path","original_title","ref","check","Component","connect","state","dispatch","type","value","Movie","match","params","setData","loadingMovie","alt","align","src","height","width","padding","textAlign","overview","release_date","revenue","vote_average","runtime","status","float","margin","NavLink","to","App","Switch","Route","path","exact","component","Boolean","location","hostname","initialState","reducer","arguments","length","undefined","action","Object","objectSpread","newArray","concat","store","createStore","ReactDOM","render","BrowserRouter","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.548591a5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport {connect} from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nclass Movies extends Component {\r\n  componentDidMount(){\r\n    axios.get('https://akrp-server.herokuapp.com/movies?p=1')\r\n    .then(response=>\r\n      {\r\n          this.props.setMovies(response.data,false)\r\n      })\r\n      .catch(error =>{\r\n          console.log(error);\r\n      })\r\n    window.addEventListener('scroll', this.onScroll, false);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.onScroll, false);\r\n  }\r\n  count = 2;\r\n  onScroll = () => {\r\n    if((window.scrollY) >= (window.innerHeight*2)) {\r\n      axios.get('https://akrp-server.herokuapp.com/movies?p='+ this.count)\r\n      .then(response=>\r\n        {\r\n            this.props.addMovies(response.data)\r\n        })\r\n    }\r\n    this.count = this.count + 1;\r\n  }\r\n  onMovieClick= (id) => {\r\n    this.props.history.push('/'+id);\r\n  }\r\n  render() {\r\n    let movies = null;\r\n    if(this.props.loading)\r\n    {\r\n      movies = (<div style={{color:\"white\"}}>Still Loading ...</div>)\r\n    }\r\n    else{\r\n      movies = this.props.movieArray.map((movie,index)=>{\r\n        return (<div key= {movie._id} className=\"App-movie\" onClick={()=>this.onMovieClick(movie._id)} style={{backgroundImage: \"url(\"+\r\n          'https://image.tmdb.org/t/p/w500/'+movie.poster_path+\")\"}}>\r\n        <h3>{movie.original_title}</h3>\r\n        </div>)});\r\n    }\r\n    return (\r\n      <div className=\"App\" ref=\"iScroll\" onScroll={this.check}>\r\n        <div className=\"App-movies\">\r\n          {movies}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n    return{\r\n        loading : state.loading,\r\n        movieArray: state.movieArray,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setMovies : (data,loading) => dispatch({type: 'SETMOVIES', value : data, loading:loading}),\r\n        addMovies : (data) => dispatch({type: 'ADDMOVIES', value : data}),\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Movies);\r\n\r\n","import React,{Component} from 'react';\r\nimport axios from 'axios';\r\nimport '../../App.css';\r\nimport {connect} from 'react-redux';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass Movie extends Component{\r\n    componentDidMount(){\r\n        axios.get(' https://akrp-server.herokuapp.com/movies/' + this.props.match.params.id)\r\n        .then(response=>{\r\n            this.props.setData(response.data,false);\r\n            console.log(response.data);\r\n        })\r\n    }\r\n    \r\n    render(){\r\n        let movie = null;\r\n        if(this.props.loadingMovie)\r\n        {\r\n            movie = (<div>Loading Details ...</div>);\r\n        }\r\n        else{\r\n            movie= (<div className=\"App-movieone\">\r\n            <img alt=\"poster\" align = \"left\" src = {\"http://image.tmdb.org/t/p/original\"+this.props.data[0].poster_path} height=\"550\" width=\"400\"></img>\r\n            <table style={{padding: \"20px\", textAlign: \"left\"}}>\r\n            <tbody>\r\n                <tr>\r\n                    <td width=\"100\">Title : </td>\r\n                    <td>{this.props.data[0].original_title}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Overview : </td>\r\n                    <td>{this.props.data[0].overview}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Release Date : </td>\r\n                    <td>{this.props.data[0].release_date}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Revenue : </td>\r\n                    <td>${this.props.data[0].revenue}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Rating : </td>\r\n                    <td>{this.props.data[0].vote_average}/10</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Runtime : </td>\r\n                    <td>{this.props.data[0].runtime}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Status : </td>\r\n                    <td>{this.props.data[0].status}</td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            \r\n\r\n            </div>)\r\n        }\r\n        return <div>\r\n            \r\n            <button style={{float: \"left\", color: \"white\", margin : \"20px\"}}><NavLink to=\"/\">Go Back</NavLink></button>\r\n            {movie}\r\n        </div>\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        loadingMovie : state.loadingMovie,\r\n        data : state.data\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setData : (data,loadingMovie) => dispatch({type: 'SETDATA', value : data, loadingMovie : loadingMovie})\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Movie);","import React, { Component } from 'react';\nimport './App.css';\nimport {Switch,Route} from 'react-router-dom';\nimport Movies from './Containers/Movies/Movies';\nimport Movie from './Containers/Movie/Movie';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/\" exact component={Movies}></Route>\n          <Route path=\"/:id\" component={Movie}></Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n    data : [],\r\n    loadingMovie : true,\r\n    movieArray : [],\r\n    loading : true\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    if(action.type === 'SETDATA'){\r\n        return{\r\n            ...state,\r\n            loadingMovie : action.loadingMovie,\r\n            data : action.value\r\n        }\r\n    }\r\n    if(action.type === 'SETMOVIES'){\r\n        return{\r\n            ...state,\r\n            movieArray : action.value,\r\n            loading : action.loading\r\n        }\r\n    }\r\n    if(action.type === 'ADDMOVIES'){\r\n        let newArray = state.movieArray.concat(action.value);\r\n        return{\r\n            ...state,\r\n            movieArray :newArray,\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport { createStore} from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './Store/reducer';\n\nconst store = createStore(reducer);\nReactDOM.render(<BrowserRouter><Provider store={store}><App /></Provider></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}